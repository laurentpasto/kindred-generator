{"ast":null,"code":"var _jsxFileName = \"/Users/laurentpastorelli/Documents/WORK/kindred/00- GITHUB-KINDRED/kindred-generator/src/components/LogoGenerator.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport shapes from '../data/shapes'; // Import your shapes data\nimport colors from '../data/colors'; // Import your colors data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LogoGenerator = () => {\n  _s();\n  const [mainShape, setMainShape] = useState(shapes[0]);\n  const [topShape, setTopShape] = useState(shapes[1]);\n  const [mainColor, setMainColor] = useState(colors[0]);\n  const [topColor, setTopColor] = useState(colors[1]);\n  const handleRandom = () => {\n    let newMainShape = shapes[Math.floor(Math.random() * shapes.length)];\n    let newTopShape = shapes[Math.floor(Math.random() * shapes.length)];\n    let newMainColor = colors[Math.floor(Math.random() * colors.length)];\n    let newTopColor = colors[Math.floor(Math.random() * colors.length)];\n\n    // Ensure the top shape color is different from the main shape color\n    while (newTopColor === newMainColor) {\n      newTopColor = colors[Math.floor(Math.random() * colors.length)];\n    }\n    setMainShape(newMainShape);\n    setTopShape(newTopShape);\n    setMainColor(newMainColor);\n    setTopColor(newTopColor);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: \"200\",\n        height: \"200\",\n        children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n          width: \"200\",\n          height: \"200\",\n          fill: mainColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"use\", {\n          xlinkHref: `#${mainShape}`,\n          fill: mainColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"use\", {\n          xlinkHref: `#${topShape}`,\n          fill: topColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRandom,\n      children: \"Random\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(LogoGenerator, \"cZBbzA+mOM0RGtcQXGZklrOaMZQ=\");\n_c = LogoGenerator;\nexport default LogoGenerator;\nvar _c;\n$RefreshReg$(_c, \"LogoGenerator\");","map":{"version":3,"names":["React","useState","shapes","colors","jsxDEV","_jsxDEV","LogoGenerator","_s","mainShape","setMainShape","topShape","setTopShape","mainColor","setMainColor","topColor","setTopColor","handleRandom","newMainShape","Math","floor","random","length","newTopShape","newMainColor","newTopColor","children","width","height","fill","fileName","_jsxFileName","lineNumber","columnNumber","xlinkHref","onClick","_c","$RefreshReg$"],"sources":["/Users/laurentpastorelli/Documents/WORK/kindred/00- GITHUB-KINDRED/kindred-generator/src/components/LogoGenerator.js"],"sourcesContent":["import React, { useState } from 'react';\nimport shapes from '../data/shapes'; // Import your shapes data\nimport colors from '../data/colors'; // Import your colors data\n\nconst LogoGenerator = () => {\n  const [mainShape, setMainShape] = useState(shapes[0]);\n  const [topShape, setTopShape] = useState(shapes[1]);\n  const [mainColor, setMainColor] = useState(colors[0]);\n  const [topColor, setTopColor] = useState(colors[1]);\n\n  const handleRandom = () => {\n    let newMainShape = shapes[Math.floor(Math.random() * shapes.length)];\n    let newTopShape = shapes[Math.floor(Math.random() * shapes.length)];\n    let newMainColor = colors[Math.floor(Math.random() * colors.length)];\n    let newTopColor = colors[Math.floor(Math.random() * colors.length)];\n\n    // Ensure the top shape color is different from the main shape color\n    while (newTopColor === newMainColor) {\n      newTopColor = colors[Math.floor(Math.random() * colors.length)];\n    }\n\n    setMainShape(newMainShape);\n    setTopShape(newTopShape);\n    setMainColor(newMainColor);\n    setTopColor(newTopColor);\n  };\n\n  return (\n    <div>\n      <div>\n        <svg width=\"200\" height=\"200\">\n          <rect width=\"200\" height=\"200\" fill={mainColor} />\n          <use xlinkHref={`#${mainShape}`} fill={mainColor} />\n          <use xlinkHref={`#${topShape}`} fill={topColor} />\n        </svg>\n      </div>\n      <button onClick={handleRandom}>Random</button>\n    </div>\n  );\n};\n\nexport default LogoGenerator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}