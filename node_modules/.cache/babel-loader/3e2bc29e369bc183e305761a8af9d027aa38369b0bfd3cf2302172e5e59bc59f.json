{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nconst COLORS = ['#9EC6AA', '#FFE100', '#A5BB1A', '#2265C9', '#666565', '#FB5E00', '#F584B5', '#E40000', '#9774B4'];\nconst TOP_SHAPE_FILES = ['Vectorshape--1.svg', 'Vectorshape--2.svg', 'Vectorshape--3.svg', 'Vectorshape--4.svg', 'Vectorshape--5.svg', 'Vectorshape--6.svg', 'Vectorshape--7.svg', 'Vectorshape--8.svg', 'Vectorshape--9.svg', 'Vectorshape--10.svg', 'Vectorshape--11.svg', 'Vectorshape--12.svg', 'Vectorshape--13.svg', 'Vectorshape--14.svg', 'Vectorshape--15.svg', 'Vectorshape--16.svg', 'Vectorshape--17.svg', 'Vectorshape--18.svg', 'Vectorshape--19.svg', 'Vectorshape--20.svg', 'Vectorshape--21.svg', 'Vectorshape--22.svg', 'Vectorshape--23.svg', 'Vectorshape--24.svg', 'Vectorshape--25.svg', 'Vectorshape--26.svg', 'Vectorshape--27.svg', 'Vectorshape--28.svg', 'Vectorshape--29.svg', 'Vectorshape--30.svg', 'Vectorshape--31.svg', 'Vectorshape--32.svg', 'Vectorshape--33.svg', 'Vectorshape--34.svg', 'Vectorshape--35.svg', 'Vectorshape--36.svg'];\nconst LogoGenerator = () => {\n  _s();\n  const [mainColor, setMainColor] = useState(COLORS[0]);\n  const [topColor, setTopColor] = useState(COLORS[1]);\n  const [currentTopShape, setCurrentTopShape] = useState(0);\n  const [mainShapePath, setMainShapePath] = useState('');\n  const [topShapePaths, setTopShapePaths] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const extractPathFromSVG = svgContent => {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(svgContent, 'image/svg+xml');\n    const pathElement = doc.querySelector('path');\n    return pathElement ? pathElement.getAttribute('d') : '';\n  };\n  useEffect(() => {\n    const loadSVGs = async () => {\n      try {\n        const mainShapeContent = await fetch('main_shape.svg').then(response => response.text());\n        const mainPath = extractPathFromSVG(mainShapeContent);\n        setMainShapePath(mainPath);\n        const paths = await Promise.all(TOP_SHAPE_FILES.map(async filename => {\n          const content = await fetch(filename).then(response => response.text());\n          return extractPathFromSVG(content);\n        }));\n        setTopShapePaths(paths);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error loading SVG files:', error);\n        setLoading(false);\n      }\n    };\n    loadSVGs();\n  }, []);\n  const getRandomColor = excludeColor => {\n    const availableColors = COLORS.filter(color => color !== excludeColor);\n    return availableColors[Math.floor(Math.random() * availableColors.length)];\n  };\n  const handleRandom = () => {\n    const newMainColor = COLORS[Math.floor(Math.random() * COLORS.length)];\n    const newTopColor = getRandomColor(newMainColor);\n    const newTopShape = Math.floor(Math.random() * topShapePaths.length);\n    setMainColor(newMainColor);\n    setTopColor(newTopColor);\n    setCurrentTopShape(newTopShape);\n  };\n  const handleGenerate = () => {\n    const svgContent = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<svg width=\"200\" height=\"200\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path d=\"${mainShapePath}\" fill=\"${mainColor}\"/>\n  <path d=\"${topShapePaths[currentTopShape]}\" fill=\"${topColor}\"/>\n</svg>`;\n    const blob = new Blob([svgContent], {\n      type: 'image/svg+xml'\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `logo-${Date.now()}.svg`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  };\n  if (loading) {\n    return /*#__PURE__*/React.createElement('div', {\n      className: 'p-8'\n    }, 'Loading SVG files...');\n  }\n  return /*#__PURE__*/React.createElement('div', {\n    className: 'p-8 flex gap-8'\n  }, /*#__PURE__*/React.createElement('div', {\n    className: 'w-48 space-y-6'\n  }, /*#__PURE__*/React.createElement('div', {\n    className: 'space-y-2'\n  }, /*#__PURE__*/React.createElement('label', {\n    className: 'block text-sm text-gray-600'\n  }, 'Main Shape Color'), /*#__PURE__*/React.createElement('div', {\n    className: 'grid grid-cols-3 gap-2'\n  }, COLORS.map(color => /*#__PURE__*/React.createElement('button', {\n    key: color,\n    className: 'w-8 h-8 rounded-full border-2 border-gray-200 hover:border-gray-400',\n    style: {\n      backgroundColor: color\n    },\n    onClick: () => {\n      setMainColor(color);\n      if (color === topColor) {\n        setTopColor(getRandomColor(color));\n      }\n    }\n  })))), /*#__PURE__*/React.createElement('div', {\n    className: 'space-y-2'\n  }, /*#__PURE__*/React.createElement('label', {\n    className: 'block text-sm text-gray-600'\n  }, 'Top Shape Color'), /*#__PURE__*/React.createElement('div', {\n    className: 'grid grid-cols-3 gap-2'\n  }, COLORS.map(color => /*#__PURE__*/React.createElement('button', {\n    key: color,\n    className: 'w-8 h-8 rounded-full border-2 border-gray-200 hover:border-gray-400',\n    style: {\n      backgroundColor: color,\n      opacity: color === mainColor ? 0.3 : 1,\n      cursor: color === mainColor ? 'not-allowed' : 'pointer'\n    },\n    onClick: () => {\n      if (color !== mainColor) {\n        setTopColor(color);\n      }\n    }\n  })))), /*#__PURE__*/React.createElement('div', {\n    className: 'text-sm text-gray-600'\n  }, `Current Shape: ${currentTopShape + 1} of ${topShapePaths.length}`), /*#__PURE__*/React.createElement('button', {\n    onClick: handleRandom,\n    className: 'w-full px-4 py-2 border rounded-lg text-gray-600 hover:bg-gray-50'\n  }, 'Random'), /*#__PURE__*/React.createElement('button', {\n    onClick: handleGenerate,\n    className: 'w-full px-4 py-2 border rounded-lg text-gray-600 hover:bg-gray-50'\n  }, 'Generate')), /*#__PURE__*/React.createElement('div', {\n    className: 'w-96 h-96 bg-gray-100 rounded-lg flex items-center justify-center'\n  }, /*#__PURE__*/React.createElement('svg', {\n    width: '200',\n    height: '200',\n    viewBox: '0 0 100 100'\n  }, /*#__PURE__*/React.createElement('path', {\n    d: mainShapePath,\n    fill: mainColor\n  }), /*#__PURE__*/React.createElement('path', {\n    d: topShapePaths[currentTopShape],\n    fill: topColor\n  }))));\n};\n_s(LogoGenerator, \"+mz/2h2DEPiG84TZP5wI+08EZ2M=\");\n_c = LogoGenerator;\nexport default LogoGenerator;\nvar _c;\n$RefreshReg$(_c, \"LogoGenerator\");","map":{"version":3,"names":["React","useState","useEffect","COLORS","TOP_SHAPE_FILES","LogoGenerator","_s","mainColor","setMainColor","topColor","setTopColor","currentTopShape","setCurrentTopShape","mainShapePath","setMainShapePath","topShapePaths","setTopShapePaths","loading","setLoading","extractPathFromSVG","svgContent","parser","DOMParser","doc","parseFromString","pathElement","querySelector","getAttribute","loadSVGs","mainShapeContent","fetch","then","response","text","mainPath","paths","Promise","all","map","filename","content","error","console","getRandomColor","excludeColor","availableColors","filter","color","Math","floor","random","length","handleRandom","newMainColor","newTopColor","newTopShape","handleGenerate","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","Date","now","body","appendChild","click","removeChild","revokeObjectURL","className","key","style","backgroundColor","onClick","opacity","cursor","width","height","viewBox","d","fill","_c","$RefreshReg$"],"sources":["/Users/laurentpastorelli/Documents/WORK/kindred/00- GITHUB-KINDRED/kindred-generator/src/components/LogoGenerator.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst COLORS = [\n  '#9EC6AA', '#FFE100', '#A5BB1A', '#2265C9',\n  '#666565', '#FB5E00', '#F584B5', '#E40000', '#9774B4'\n];\n\nconst TOP_SHAPE_FILES = [\n  'Vectorshape--1.svg', 'Vectorshape--2.svg', 'Vectorshape--3.svg',\n  'Vectorshape--4.svg', 'Vectorshape--5.svg', 'Vectorshape--6.svg',\n  'Vectorshape--7.svg', 'Vectorshape--8.svg', 'Vectorshape--9.svg',\n  'Vectorshape--10.svg', 'Vectorshape--11.svg', 'Vectorshape--12.svg',\n  'Vectorshape--13.svg', 'Vectorshape--14.svg', 'Vectorshape--15.svg',\n  'Vectorshape--16.svg', 'Vectorshape--17.svg', 'Vectorshape--18.svg',\n  'Vectorshape--19.svg', 'Vectorshape--20.svg', 'Vectorshape--21.svg',\n  'Vectorshape--22.svg', 'Vectorshape--23.svg', 'Vectorshape--24.svg',\n  'Vectorshape--25.svg', 'Vectorshape--26.svg', 'Vectorshape--27.svg',\n  'Vectorshape--28.svg', 'Vectorshape--29.svg', 'Vectorshape--30.svg',\n  'Vectorshape--31.svg', 'Vectorshape--32.svg', 'Vectorshape--33.svg',\n  'Vectorshape--34.svg', 'Vectorshape--35.svg', 'Vectorshape--36.svg'\n];\n\nconst LogoGenerator = () => {\n  const [mainColor, setMainColor] = useState(COLORS[0]);\n  const [topColor, setTopColor] = useState(COLORS[1]);\n  const [currentTopShape, setCurrentTopShape] = useState(0);\n  const [mainShapePath, setMainShapePath] = useState('');\n  const [topShapePaths, setTopShapePaths] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  const extractPathFromSVG = (svgContent) => {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(svgContent, 'image/svg+xml');\n    const pathElement = doc.querySelector('path');\n    return pathElement ? pathElement.getAttribute('d') : '';\n  };\n\n  useEffect(() => {\n    const loadSVGs = async () => {\n      try {\n        const mainShapeContent = await fetch('main_shape.svg').then(response => response.text());\n        const mainPath = extractPathFromSVG(mainShapeContent);\n        setMainShapePath(mainPath);\n\n        const paths = await Promise.all(\n          TOP_SHAPE_FILES.map(async (filename) => {\n            const content = await fetch(filename).then(response => response.text());\n            return extractPathFromSVG(content);\n          })\n        );\n        setTopShapePaths(paths);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error loading SVG files:', error);\n        setLoading(false);\n      }\n    };\n\n    loadSVGs();\n  }, []);\n\n  const getRandomColor = (excludeColor) => {\n    const availableColors = COLORS.filter(color => color !== excludeColor);\n    return availableColors[Math.floor(Math.random() * availableColors.length)];\n  };\n\n  const handleRandom = () => {\n    const newMainColor = COLORS[Math.floor(Math.random() * COLORS.length)];\n    const newTopColor = getRandomColor(newMainColor);\n    const newTopShape = Math.floor(Math.random() * topShapePaths.length);\n\n    setMainColor(newMainColor);\n    setTopColor(newTopColor);\n    setCurrentTopShape(newTopShape);\n  };\n\n  const handleGenerate = () => {\n    const svgContent = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<svg width=\"200\" height=\"200\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path d=\"${mainShapePath}\" fill=\"${mainColor}\"/>\n  <path d=\"${topShapePaths[currentTopShape]}\" fill=\"${topColor}\"/>\n</svg>`;\n\n    const blob = new Blob([svgContent], { type: 'image/svg+xml' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `logo-${Date.now()}.svg`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  };\n\n  if (loading) {\n    return React.createElement('div', { className: 'p-8' }, 'Loading SVG files...');\n  }\n\n  return React.createElement(\n    'div',\n    { className: 'p-8 flex gap-8' },\n    React.createElement(\n      'div',\n      { className: 'w-48 space-y-6' },\n      React.createElement(\n        'div',\n        { className: 'space-y-2' },\n        React.createElement('label', { className: 'block text-sm text-gray-600' }, 'Main Shape Color'),\n        React.createElement(\n          'div',\n          { className: 'grid grid-cols-3 gap-2' },\n          COLORS.map((color) =>\n            React.createElement(\n              'button',\n              {\n                key: color,\n                className: 'w-8 h-8 rounded-full border-2 border-gray-200 hover:border-gray-400',\n                style: { backgroundColor: color },\n                onClick: () => {\n                  setMainColor(color);\n                  if (color === topColor) {\n                    setTopColor(getRandomColor(color));\n                  }\n                }\n              }\n            )\n          )\n        )\n      ),\n      React.createElement(\n        'div',\n        { className: 'space-y-2' },\n        React.createElement('label', { className: 'block text-sm text-gray-600' }, 'Top Shape Color'),\n        React.createElement(\n          'div',\n          { className: 'grid grid-cols-3 gap-2' },\n          COLORS.map((color) =>\n            React.createElement(\n              'button',\n              {\n                key: color,\n                className: 'w-8 h-8 rounded-full border-2 border-gray-200 hover:border-gray-400',\n                style: {\n                  backgroundColor: color,\n                  opacity: color === mainColor ? 0.3 : 1,\n                  cursor: color === mainColor ? 'not-allowed' : 'pointer'\n                },\n                onClick: () => {\n                  if (color !== mainColor) {\n                    setTopColor(color);\n                  }\n                }\n              }\n            )\n          )\n        )\n      ),\n      React.createElement(\n        'div',\n        { className: 'text-sm text-gray-600' },\n        `Current Shape: ${currentTopShape + 1} of ${topShapePaths.length}`\n      ),\n      React.createElement(\n        'button',\n        {\n          onClick: handleRandom,\n          className: 'w-full px-4 py-2 border rounded-lg text-gray-600 hover:bg-gray-50'\n        },\n        'Random'\n      ),\n      React.createElement(\n        'button',\n        {\n          onClick: handleGenerate,\n          className: 'w-full px-4 py-2 border rounded-lg text-gray-600 hover:bg-gray-50'\n        },\n        'Generate'\n      )\n    ),\n    React.createElement(\n      'div',\n      { className: 'w-96 h-96 bg-gray-100 rounded-lg flex items-center justify-center' },\n      React.createElement(\n        'svg',\n        { width: '200', height: '200', viewBox: '0 0 100 100' },\n        React.createElement('path', { d: mainShapePath, fill: mainColor }),\n        React.createElement('path', { d: topShapePaths[currentTopShape], fill: topColor })\n      )\n    )\n  );\n};\n\nexport default LogoGenerator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}